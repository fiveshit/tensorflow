import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets("MNIST_data/",one_hot = True)

x = tf.placeholder(tf.float32, [None, 784])

W = tf.Variable(tf.zeros([784,10]))
b = tf.Variable(tf.zeros([10]))

y = tf.nn.softmax(tf.matmul(x, W) + b)

y_ =tf.placeholder(tf.float32, [None, 10])

cross_entropy  = -tf.reduce_sum(y_ *tf.log(y))

train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)

init = tf.global_variables_initializer()

sess = tf.Session()

sess.run(init)

for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)     #random train data(100) use batch 
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})  # feed_dict sent value in batch_xs and batch_ys

# arg_max is bool value like [True False True True] 
# cast translate like [1 0 1 1]

correct_prediction = tf.equal(tf.arg_max(y, 1), tf.arg_max(y_, 1)) # judgment two value 
accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))   # accurate rate 

print("Accuarcy on Test-dataset: ", sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))
